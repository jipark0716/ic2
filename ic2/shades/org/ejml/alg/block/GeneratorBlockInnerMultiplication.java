/*     */ package ic2.shades.org.ejml.alg.block;
/*     */ 
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.PrintStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class GeneratorBlockInnerMultiplication
/*     */ {
/*     */   String className;
/*     */   PrintStream stream;
/*     */   
/*     */   public GeneratorBlockInnerMultiplication(String className) throws FileNotFoundException {
/*  36 */     this.className = className;
/*  37 */     this.stream = new PrintStream(className + ".java");
/*     */   }
/*     */   
/*     */   public void createClass() {
/*  41 */     printTop();
/*     */     
/*  43 */     for (int i = 0; i < 2; i++) {
/*  44 */       boolean hasAlpha = (i == 1);
/*  45 */       for (Operation o : Operation.values()) {
/*  46 */         if (!hasAlpha || o != Operation.MINUS) {
/*     */           
/*  48 */           print_mult(hasAlpha, o);
/*  49 */           print_multTransA(hasAlpha, o);
/*  50 */           print_multTransB(hasAlpha, o);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/*  55 */     this.stream.print("}\n");
/*     */   }
/*     */   
/*     */   private void printTop() {
/*  59 */     String foo = "/*\n * Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.\n *\n * This file is part of Efficient Java Matrix Library (EJML).\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.ejml.alg.block;\n\n/**\n * <p>\n * Matrix multiplication for the inner row major blocks, typically inside of a {@link org.ejml.data.BlockMatrix64F}.\n * </p>\n *\n * <p>\n * This code was auto generated by {@link GeneratorBlockInnerMultiplication} and should not be modified directly.\n * </p>\n *\n * @author Peter Abeles\n */\npublic class " + this.className + " {\n";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  76 */     this.stream.print(foo);
/*     */   }
/*     */ 
/*     */   
/*     */   private void print_mult(boolean hasAlpha, Operation opType) {
/*  81 */     createHeader(hasAlpha, opType, false, false);
/*     */     
/*  83 */     this.stream.print("//        for( int i = 0; i < heightA; i++ ) {\n//            for( int k = 0; k < widthA; k++ ) {\n//                for( int j = 0; j < widthC; j++ ) {\n//                    dataC[ i*widthC + j + indexC ] += dataA[i*widthA + k + indexA] * dataB[k*widthC + j + indexB];\n//                }\n//            }\n//        }\n");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  92 */     this.stream.println();
/*     */     
/*  94 */     String o = (opType == Operation.MINUS) ? "-=" : "+=";
/*  95 */     String m = hasAlpha ? "alpha*" : "";
/*     */     
/*  97 */     this.stream.print("        int a = indexA;\n        int rowC = indexC;\n        for( int i = 0; i < heightA; i++ , rowC += widthC ) {\n            int b = indexB;\n\n            final int endC = rowC + widthC;\n            final int endA = a + widthA;\n            while( a != endA ) {//for( int k = 0; k < widthA; k++ ) {\n                double valA = " + m + "dataA[a++];\n" + "\n" + "                int c = rowC;\n" + "\n");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 112 */     if (opType == Operation.SET) {
/* 113 */       this.stream.print("                if( b == indexB ) {\n                    while( c != endC  ) {//for( int j = 0; j < widthC; j++ ) {\n                        dataC[ c++ ] = valA * dataB[ b++ ];\n                    }\n                } else {\n                    while( c != endC  ) {//for( int j = 0; j < widthC; j++ ) {\n                        dataC[ c++ ] " + o + " valA * dataB[ b++ ];\n" + "                    }\n" + "                }\n");
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     }
/*     */     else {
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 124 */       this.stream.print("                while( c != endC  ) {//for( int j = 0; j < widthC; j++ ) {\n                    dataC[ c++ ] " + o + " valA * dataB[ b++ ];\n" + "                }\n");
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 129 */     this.stream.println("            }\n        }");
/*     */ 
/*     */ 
/*     */     
/* 133 */     this.stream.println("    }");
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   private String createOpString(boolean hasAlpha, Operation opType) {
/* 139 */     String o = opString(opType);
/* 140 */     if (hasAlpha) o = o + " alpha * "; 
/* 141 */     return o;
/*     */   }
/*     */ 
/*     */   
/*     */   private void print_multTransA(boolean hasAlpha, Operation opType) {
/* 146 */     createHeader(hasAlpha, opType, true, false);
/*     */     
/* 148 */     String o = (opType == Operation.MINUS) ? "-=" : "+=";
/* 149 */     String m = hasAlpha ? "alpha*" : "";
/*     */     
/* 151 */     this.stream.print("//        for( int i = 0; i < widthA; i++ ) {\n//            for( int k = 0; k < heightA; k++ ) {\n//                double valA = dataA[k*widthA + i + indexA];\n//                for( int j = 0; j < widthC; j++ ) {\n//                    dataC[ i*widthC + j + indexC ] += valA * dataB[k*widthC + j + indexB];\n//                }\n//            }\n//        }\n");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 160 */     this.stream.println();
/*     */     
/* 162 */     this.stream.print("        int rowC = indexC;\n        for( int i = 0; i < widthA; i++ , rowC += widthC) {\n            int colA = i + indexA;\n            int endA = colA + widthA*heightA;\n            int b = indexB;\n\n            // for( int k = 0; k < heightA; k++ ) {\n            while(colA != endA ) {\n                double valA = " + m + "dataA[colA];\n" + "\n" + "                int c = rowC;\n" + "                final int endB = b + widthC;\n" + "\n" + "                //for( int j = 0; j < widthC; j++ ) {\n");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 177 */     if (opType == Operation.SET) {
/* 178 */       this.stream.print("                if( b == indexB ) {\n                    while( b != endB ) {\n                        dataC[ c++ ] = valA * dataB[b++];\n                    } \n                } else {\n                    while( b != endB ) {\n                        dataC[ c++ ] " + o + " valA * dataB[b++];\n" + "                    }\n" + "                }\n");
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     }
/*     */     else {
/*     */ 
/*     */ 
/*     */ 
/*     */       
/* 189 */       this.stream.print("                while( b != endB ) {\n                    dataC[ c++ ] " + o + " valA * dataB[b++];\n" + "                }\n");
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 194 */     this.stream.print("                colA += widthA;\n            }\n        }\n");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 200 */     this.stream.println("    }");
/*     */   }
/*     */ 
/*     */   
/*     */   private void print_multTransB(boolean hasAlpha, Operation opType) {
/* 205 */     createHeader(hasAlpha, opType, false, true);
/*     */     
/* 207 */     String o = createOpString(hasAlpha, opType);
/*     */     
/* 209 */     this.stream.println("        for( int i = 0; i < heightA; i++ ) {\n            for( int j = 0; j < widthC; j++ ) {\n                double val = 0;\n\n                for( int k = 0; k < widthA; k++ ) {\n                    val += dataA[i*widthA + k + indexA] * dataB[j*widthA + k + indexB];\n                }\n\n                dataC[ i*widthC + j + indexC ] " + o + " val;\n" + "            }\n" + "        }");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 222 */     this.stream.println("    }");
/*     */   }
/*     */ 
/*     */   
/*     */   private void createHeader(boolean hasAlpha, Operation opType, boolean transA, boolean transB) {
/* 227 */     String opTypeString, alphaString = hasAlpha ? " &alpha; " : "";
/* 228 */     String alphaParam = hasAlpha ? " double alpha ," : "";
/* 229 */     String transAString = transA ? "<sup>T</sup>" : "";
/* 230 */     String transBString = transB ? "<sup>T</sup>" : "";
/*     */ 
/*     */     
/* 233 */     switch (opType) { case MINUS:
/* 234 */         opTypeString = "C - "; break;
/* 235 */       case PLUS: opTypeString = "C + "; break;
/* 236 */       case SET: opTypeString = ""; break;
/* 237 */       default: throw new RuntimeException("Unknown optype"); }
/*     */ 
/*     */ 
/*     */     
/* 241 */     String funcName = "blockMult" + opName(opType);
/* 242 */     if (transA && transB) { funcName = funcName + "TransAB"; }
/* 243 */     else if (transA) { funcName = funcName + "TransA"; }
/* 244 */     else if (transB) { funcName = funcName + "TransB"; }
/*     */     
/* 246 */     this.stream.println();
/* 247 */     this.stream.print("    /**\n     * <p>\n     * Performs the follow operation on individual inner blocks:<br>\n     * <br>\n");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 253 */     this.stream.print("     * C = " + opTypeString + alphaString + "A" + transAString + " * B" + transBString + "\n");
/*     */     
/* 255 */     this.stream.print("     * </p>\n     */\n    public static void " + funcName + "(" + alphaParam + " final double[] dataA, final double []dataB, final double []dataC,\n" + "                                     int indexA, int indexB, int indexC,\n" + "                                     final int heightA, final int widthA, final int widthC) {\n");
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private String opString(Operation opType) {
/* 264 */     switch (opType) {
/*     */       case MINUS:
/* 266 */         return "-=";
/*     */       
/*     */       case PLUS:
/* 269 */         return "+=";
/*     */       
/*     */       case SET:
/* 272 */         return "=";
/*     */     } 
/*     */     
/* 275 */     throw new RuntimeException("Unknown opType " + opType);
/*     */   }
/*     */ 
/*     */   
/*     */   private String opName(Operation opType) {
/* 280 */     switch (opType) {
/*     */       case MINUS:
/* 282 */         return "Minus";
/*     */       
/*     */       case PLUS:
/* 285 */         return "Plus";
/*     */       
/*     */       case SET:
/* 288 */         return "Set";
/*     */     } 
/*     */     
/* 291 */     throw new RuntimeException("Unknown opType " + opType);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private enum Operation
/*     */   {
/* 299 */     PLUS,
/*     */     
/* 301 */     MINUS,
/*     */     
/* 303 */     SET;
/*     */   }
/*     */   
/*     */   public static void main(String[] args) throws FileNotFoundException {
/* 307 */     GeneratorBlockInnerMultiplication app = new GeneratorBlockInnerMultiplication("BlockInnerMultiplication");
/*     */     
/* 309 */     app.createClass();
/*     */     
/* 311 */     System.out.println("Done generating class");
/*     */   }
/*     */ }


/* Location:              C:\Users\jipar\Desktop\mods\1.12.2\industrialcraft-2-2.8.211-ex112.jar!\ic2\shades\org\ejml\alg\block\GeneratorBlockInnerMultiplication.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       1.1.3
 */